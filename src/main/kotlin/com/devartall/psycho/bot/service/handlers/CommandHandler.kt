package com.devartall.psycho.bot.service.handlers

import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Message
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeChat
import com.devartall.psycho.bot.service.AdminService
import com.devartall.psycho.bot.service.AffirmationService
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands

@Component
class CommandHandler(
    private val adminService: AdminService,
    private val affirmationService: AffirmationService,
    private val keyboardHelper: KeyboardHelper,
) {
    companion object {
        // –ö–æ–º–∞–Ω–¥—ã
        const val START_COMMAND = "/start"
        const val AUTH_COMMAND = "/auth"
        const val LOGOUT_COMMAND = "/logout"
        const val ADD_COMMAND = "/add"
        const val LIST_COMMAND = "/list"
        const val DELETE_ALL_COMMAND = "/delete"

        // –û–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        private const val START_DESCRIPTION = "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        private const val AUTH_DESCRIPTION = "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        private const val LOGOUT_DESCRIPTION = "–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        private const val ADD_DESCRIPTION = "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é"
        private const val LIST_DESCRIPTION = "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π"
        private const val DELETE_ALL_DESCRIPTION = "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏"
    }

    fun getDefaultCommands(): List<BotCommand> = listOf(
        BotCommand(START_COMMAND.removePrefix("/"), START_DESCRIPTION),
        BotCommand(AUTH_COMMAND.removePrefix("/"), AUTH_DESCRIPTION)
    )

    fun getAdminCommands(): List<BotCommand> = listOf(
        BotCommand(START_COMMAND.removePrefix("/"), START_DESCRIPTION),
        BotCommand(LOGOUT_COMMAND.removePrefix("/"), LOGOUT_DESCRIPTION),
        BotCommand(ADD_COMMAND.removePrefix("/"), ADD_DESCRIPTION),
        BotCommand(LIST_COMMAND.removePrefix("/"), LIST_DESCRIPTION),
        BotCommand(DELETE_ALL_COMMAND.removePrefix("/"), DELETE_ALL_DESCRIPTION)
    )

    fun setDefaultCommands(chatId: Long): SetMyCommands {
        val commandScope = BotCommandScopeChat(chatId.toString())

        val setMyCommands = SetMyCommands.builder()
            .commands(getDefaultCommands())
            .scope(commandScope)
            .build()

        return setMyCommands
    }

    fun setAdminCommands(chatId: Long): SetMyCommands {
        val commandScope = BotCommandScopeChat(chatId.toString())

        val setMyCommands = SetMyCommands.builder()
            .commands(getAdminCommands())
            .scope(commandScope)
            .build()

        return setMyCommands
    }

    fun handleCommand(message: Message): SendMessage {
        val command = message.text.split(" ")[0]
        return when (command) {
            START_COMMAND -> handleStartCommand(message)
            AUTH_COMMAND -> handleAuthCommand(message)
            LOGOUT_COMMAND -> handleLogoutCommand(message)
            ADD_COMMAND -> handleAddCommand(message)
            LIST_COMMAND -> handleListCommand(message)
            DELETE_ALL_COMMAND -> handleDeleteAllCommand(message)
            else -> SendMessage().apply {
                chatId = message.chatId.toString()
                text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ $START_COMMAND –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."
                replyMarkup = keyboardHelper.createReplyKeyboardMarkup()
            }
        }
    }

    private fun handleStartCommand(message: Message): SendMessage {
        val helpText = buildString {
            append("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è–º–∏.\n\n")
            append("üîç –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"${KeyboardHelper.GET_AFFIRMATION_BUTTON}\" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é.\n\n")

            if (adminService.isAdmin(message.from.id)) {
                append("üëë –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n")
                append("‚Ä¢ $ADD_COMMAND <—Ç–µ–∫—Å—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é\n")
                append("‚Ä¢ $LIST_COMMAND - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π\n")
                append("‚Ä¢ $DELETE_ALL_COMMAND - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏\n")
                append("‚Ä¢ $LOGOUT_COMMAND - –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n")
            } else {
                append("üîê –ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n")
                append("‚Ä¢ $AUTH_COMMAND <–ø–∞—Ä–æ–ª—å> - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n")
            }
        }

        return SendMessage().apply {
            chatId = message.chatId.toString()
            text = helpText
            enableMarkdown(true)
            replyMarkup = keyboardHelper.createReplyKeyboardMarkup()
        }
    }

    private fun handleAuthCommand(message: Message): SendMessage {
        val chatId = message.chatId.toString()
        val response = SendMessage().apply {
            this.chatId = chatId
            replyMarkup = keyboardHelper.createReplyKeyboardMarkup()
            text = when {
                adminService.isAdmin(message.from.id) ->
                    "–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"

                message.text.split(" ").size != 2 ->
                    "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: $AUTH_COMMAND <–ø–∞—Ä–æ–ª—å>"

                else -> {
                    val password = message.text.split(" ")[1]
                    if (adminService.checkPassword(password)) {
                        adminService.addAdmin(message.from)
                        updateCommands(message)
                        "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                    } else {
                        "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
                    }
                }
            }
        }
        return response
    }

    private fun handleLogoutCommand(message: Message): SendMessage {
        val chatId = message.chatId.toString()
        val response = SendMessage().apply {
            this.chatId = chatId
            replyMarkup = keyboardHelper.createReplyKeyboardMarkup()
            text = if (adminService.isAdmin(message.from.id)) {
                adminService.removeAdmin(message.from.id)
                updateCommands(message)
                "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            } else {
                "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            }
        }
        return response
    }

    private fun handleAddCommand(message: Message): SendMessage {
        return SendMessage().apply {
            chatId = message.chatId.toString()
            replyMarkup = keyboardHelper.createReplyKeyboardMarkup()
            text = when {
                !adminService.isAdmin(message.from.id) ->
                    "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"

                message.text.substringAfter(ADD_COMMAND).trim().isEmpty() ->
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã $ADD_COMMAND"

                else -> {
                    val text = message.text.substringAfter(ADD_COMMAND).trim()
                    affirmationService.addAffirmation(text, message.from)
                    "–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
                }
            }
        }
    }

    private fun handleListCommand(message: Message): SendMessage {
        return SendMessage().apply {
            chatId = message.chatId.toString()
            replyMarkup = keyboardHelper.createReplyKeyboardMarkup()
            enableMarkdown(true)
            text = when {
                !adminService.isAdmin(message.from.id) ->
                    "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"

                else -> {
                    val affirmations = affirmationService.getAllAffirmations()
                    if (affirmations.isEmpty()) {
                        "–°–ø–∏—Å–æ–∫ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π –ø—É—Å—Ç"
                    } else {
                        buildString {
                            append("üìù –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π:\n\n")
                            affirmations.forEachIndexed { index, affirmation ->
                                append("${index + 1}. ${affirmation.text}\n")
                                append("   _–î–æ–±–∞–≤–∏–ª: @${affirmation.authorUsername}_\n\n")
                            }
                        }
                    }
                }
            }
        }
    }

    private fun handleDeleteAllCommand(message: Message): SendMessage {
        return SendMessage().apply {
            chatId = message.chatId.toString()
            replyMarkup = keyboardHelper.createReplyKeyboardMarkup()
            text = when {
                !adminService.isAdmin(message.from.id) ->
                    "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"

                else -> {
                    val count = affirmationService.deleteAllAffirmations()
                    "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ $count –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π"
                }
            }
        }
    }

    fun updateCommands(message: Message): SetMyCommands {
        val chatId = message.chatId
        val isAdmin = adminService.isAdmin(message.from.id)

        return if (isAdmin) {
            setAdminCommands(chatId)
        } else {
            setDefaultCommands(chatId)
        }
    }
} 